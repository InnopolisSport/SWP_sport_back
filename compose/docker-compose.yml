version: '3.5'
services:
  nginx:
    restart: always
    build:
      context: ../nginx
      args:
        - DEBUG=true
    ports:
      - "80:80"
    depends_on:
      - adminpanel
      - adminer
    volumes:
      - ../nginx/logs:/var/log/nginx
      - ../nginx/access.d:/etc/nginx/access.d
      - django-static:/static
      - uploaded_media:/media:ro

  adminpanel:
    build:
      context: ../adminpage
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION
    #   Wait for postgres to startup before running server
    command: bash -c 'while !</dev/tcp/db/5432; do sleep 1; done; python manage.py runserver 0.0.0.0:8000'
    restart: always
    volumes:
      - ../adminpage:/src
      - django-auth-preserve:/usr/local/lib/python${PYTHON_VERSION}/site-packages/django/contrib/auth/migrations/
      - django-static:/static
      - uploaded_media:/uploaded_media
    ports:
      - "8000:8000"
    depends_on:
      - db
    env_file:
      - .env
    environment:
      DEBUG: 'true'

  db:
    image: db
    build:
      context: ..
      dockerfile: Dockerfile.db
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - .env

  grafana:
    image: "grafana/grafana:latest"
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
      GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s/dashboard"
      GF_AUTH_PROXY_ENABLED: "true"
      GF_AUTH_PROXY_HEADER_NAME: "X-WEBAUTH-USER"
      GF_AUTH_PROXY_HEADER_PROPERTY: "username"
      GF_AUTH_PROXY_AUTO_SIGN_UP: "true"
      GF_AUTH_PROXY_LDAP_SYNC_TTL: "60"
    env_file:
      - .env
    volumes:
      - grafana-data:/var/lib/grafana
      - ../grafana/provisioning/:/etc/grafana/provisioning/

  adminer:
    image: adminer
    restart: always
    depends_on:
      - db
    ports:
      - "8081:8080"


volumes:
  db-data:
  grafana-data:
  django-static:
  # required to preserve change to django.contrib.auth.models.Group class.
  # (verbose_name added)
  # since Innopolis adfs provides groupsid as universal identifier
  # (group - can be either in Russian or English)
  django-auth-preserve:
  uploaded_media:
